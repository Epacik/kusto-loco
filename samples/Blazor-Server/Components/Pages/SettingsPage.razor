@page "/settingspage"

@using KustoLoco.AI
@using KustoLoco.Services
@inherits OwningComponentBase

@inject SettingsService SettingsService
@inject IJSRuntime JSRuntime

<!-- 7.css -->
<link rel="stylesheet" href="https://unpkg.com/7.css" />

<h3>Settings</h3>

<div class="grid gap-md p-sm-12">
    <div class="col-8 col-sm-4">
        <div class="stack gap-md">

            <!-- OpenAI Service Type -->
            <div>
                <label for="aiType"><b>OpenAI Service Type:</b></label><br />
                <InputSelect id="aiType" @bind-Value="AIType" class="form-control select-width">
                    @foreach (var type in colAITypes)
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>
            <br />
            @if (AIType != "Local LLM")
            {
                <div>
                    <label for="apiKey"><b>Api Key (if needed):</b></label><br />
                    <InputText id="apiKey" @bind-Value="ApiKey"
                               class="form-control input-width"
                               @oninput="HandleApiKeyChange" />
                </div>
                <br />
            }
            @if (AIType == "OpenAI")
            {
                <!-- Default AI Model -->
                <div>
                    <label for="aiModel"><b>Default AI Model:</b></label><br />
                    <InputSelect id="aiModel" @bind-Value="AIModel" class="form-control select-width">
                        @foreach (var model in colModels)
                        {
                            <option value="@model">@model</option>
                        }
                    </InputSelect>
                </div>
            }
            else if (AIType == "Azure OpenAI")
            {
                <!-- Azure OpenAI Model Deployment Name -->
                <div>
                    <label for="azureModel"><b>Azure OpenAI Model Deployment Name:</b></label><br />
                    <InputText id="azureModel" @bind-Value="AIModel"
                               class="form-control input-width" />
                </div>
                <br />
                <!-- Azure OpenAI Endpoint -->
                <div>
                    <label for="endpoint"><b>Azure OpenAI Endpoint:</b></label><br />
                    <InputText id="endpoint" @bind-Value="Endpoint"
                               class="form-control input-width" />
                </div>
            }
            else if (AIType == "Local LLM")
            {
                <!-- Local LLM Endpoint -->
                <div>
                    <label for="endpoint"><b>Local LLM Endpoint:</b></label><br />
                    <InputText id="endpoint" @bind-Value="Endpoint"
                               class="form-control input-width" />
                </div>
                <br />
                <!-- Local LLM Model -->
                <div>
                    <label for="localModel"><b>Local LLM Model Name:</b></label><br />
                    <InputText id="localModel" @bind-Value="AIModel"
                               class="form-control input-width" />
                </div>
            }
            <br />
            <div class="mt-md">
                @if (!IsSettingsEntered)
                {
                    <!-- Show a 'Get Key' link only for OpenAI/Azure. -->
                    @if (AIType == "OpenAI" || AIType == "Azure OpenAI")
                    {
                        <button type="button"
                                @onclick="OpenAIKeyLink"
                                class="btn-wide">
                            Get @AIType API Key
                        </button>
                    }
                    else if (AIType == "Local LLM")
                    {
                        <!-- Local LLM doesn't require a key. You could hide or show a message here. -->
                        <button type="button"
                                disabled
                                class="btn-wide">
                            No external key needed
                        </button>
                    }
                }
                else
                {
                    <button type="button"
                            @onclick="SettingsSave"
                            class="btn-wide">
                        Save
                    </button>
                }
            </div>

        </div>
    </div>
</div>

<!-- Modal for Message -->
@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Alert!</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseMessagePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <div class="has-scrollbar" style="width: 100%; height: 100px; overflow: auto">
                            @Message
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // Services
    private OrchestratorMethods OrchestratorMethods;

    // Fields
    private string Message = "";
    private bool IsSettingsEntered = false;

    // Default Values
    private string Organization = "";
    private string ApiKey = "";
    private string AIModel = "gpt-4o";
    private string AIType = "OpenAI";
    private string Endpoint = "";
    private string AIEmbeddingModel = "";
    private string ApiVersion = "";

    // Collections
    private readonly List<string> colAITypes = new()
    {
        "OpenAI",
        "Azure OpenAI",
        "Local LLM"
    };

    private readonly List<string> colModels = new()
    {
        "gpt-4o", "gpt-4o-mini", "gpt-4-turbo"
    };

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.InitializeAsync();
        OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

        // Load existing settings
        Organization = SettingsService.Organization ?? "";
        ApiKey = SettingsService.ApiKey ?? "";
        AIModel = SettingsService.AIModel ?? "gpt-4o";
        AIType = SettingsService.AIType ?? "OpenAI";
        Endpoint = SettingsService.Endpoint ?? "";
        ApiVersion = SettingsService.ApiVersion ?? "";
        AIEmbeddingModel = SettingsService.AIEmbeddingModel ?? "";

        // If an API key or local endpoint is set, we assume settings are "entered"
        // You could refine this logic for Local LLM to also check Endpoint or Model, etc.
        IsSettingsEntered = !string.IsNullOrWhiteSpace(ApiKey)
                            || (AIType == "Local LLM" && !string.IsNullOrWhiteSpace(Endpoint));
    }

    private void HandleApiKeyChange(ChangeEventArgs e)
    {
        // Mark settings as entered if the user starts typing an API key
        ApiKey = e.Value?.ToString() ?? string.Empty;
        IsSettingsEntered = !string.IsNullOrWhiteSpace(ApiKey);
    }

    private async Task OpenAIKeyLink()
    {
        if (AIType == "OpenAI")
        {
            await JSRuntime.InvokeVoidAsync("open", "https://platform.openai.com/account/api-keys", "_blank");
        }
        else // "Azure OpenAI"
        {
            await JSRuntime.InvokeVoidAsync("open",
                "https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/create-resource?pivots=web-portal", "_blank");
        }
    }

    private async Task SettingsSave()
    {
        // Validate the API key only if using OpenAI
        if (AIType == "OpenAI" && !ApiKey.StartsWith("sk-"))
        {
            Message = "Invalid OpenAI API Key - must start with 'sk-'";
            return;
        }

        try
        {
            // Save settings
            await SettingsService.SaveSettingsAsync(
                Organization, ApiKey, AIModel, AIType, Endpoint, ApiVersion, AIEmbeddingModel
            );

            var result = await OrchestratorMethods.TestAccess(SettingsService, AIModel);

            Message = "Saved successfully!";
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    private void CloseMessagePopup()
    {
        Message = "";
    }
}
